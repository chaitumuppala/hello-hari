workflows:
  hello-hari-workflow:
    name: Hello Hari Android - APK Diagnostic
    max_build_duration: 120
    environment:
      vars:
        PACKAGE_NAME: "com.hellohari"
      node: 18.17.1
      java: 11
    scripts:
      - name: Set up Android environment
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
          
      - name: Exclude React Native modules
        script: |
          mkdir -p temp_excluded
          mv android/app/src/main/java/com/hellohari/CallDetectorModule.java temp_excluded/ || true
          mv android/app/src/main/java/com/hellohari/PermissionModule.java temp_excluded/ || true
          mv android/app/src/main/java/com/hellohari/CallDetectorPackage.java temp_excluded/ || true
          mv android/app/src/main/java/com/hellohari/AudioRecorderModule.java temp_excluded/ || true
          
      - name: Set Android SDK permissions
        script: |
          cd android && chmod +x gradlew
          
      - name: Create debug keystore
        script: |
          if [ ! -f android/app/debug.keystore ]; then
            keytool -genkeypair -v -keystore android/app/debug.keystore \
              -storepass android -alias androiddebugkey -keypass android \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -dname "CN=Android Debug,O=Android,C=US"
          fi
          
      - name: Build APK and Diagnose
        script: |
          cd android
          echo "=== BEFORE BUILD ==="
          pwd
          ls -la
          
          echo "=== BUILDING APK ==="
          ./gradlew assembleDebug --stacktrace
          
          echo "=== AFTER BUILD - SEARCHING FOR APK FILES ==="
          find . -name "*.apk" -type f -exec ls -la {} \;
          
          echo "=== BUILD OUTPUTS DIRECTORY ==="
          ls -la app/build/ || echo "No app/build directory"
          ls -la app/build/outputs/ || echo "No outputs directory"
          ls -la app/build/outputs/apk/ || echo "No apk directory"
          ls -la app/build/outputs/apk/debug/ || echo "No debug directory"
          
          echo "=== FULL PROJECT STRUCTURE ==="
          find . -type d -name "*apk*" -o -name "*build*" | head -20
          
          echo "=== ANY APK FILES ANYWHERE ==="
          find /Users/builder/clone -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
          
          echo "=== GRADLE TASKS AVAILABLE ==="
          ./gradlew tasks | grep -i apk || echo "No APK tasks found"
          
      - name: Try Alternative Build Methods
        script: |
          cd android
          echo "=== TRYING ALTERNATIVE BUILD COMMANDS ==="
          
          echo "1. Try assembleRelease:"
          ./gradlew assembleRelease || echo "assembleRelease failed"
          
          echo "2. Try build:"
          ./gradlew build || echo "build failed"
          
          echo "3. Search again for any APK files:"
          find . -name "*.apk" -type f -exec ls -la {} \;
          
          echo "4. Check if unsigned APK exists:"
          find . -name "*unsigned*" -type f
          
          echo "5. List all files in build/outputs:"
          find app/build/outputs -type f 2>/dev/null || echo "No files in build/outputs"
          
    artifacts:
      - android/app/build/outputs/**/*
      - android/app/build/**/*.apk
      - android/**/*.apk
      - "**/*.apk"
      
    publishing:
      email:
        recipients:
          - your.email@example.com
        notify:
          success: true
          failure: true
